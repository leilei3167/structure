package main

/*
一.基本
线性表定义:0个或多个数据元素的有限序列
元素之间是有顺序的,并且强调是有限的

假想我们在使用线性表时,所需要用到的基本操作(如增删改查),就可以得到线性表的抽象数据类型表示:
ADT List
Data
	定义...描述...
Operation
	ListEmpty(L)
        初始条件：线性表已存在
        操作结果：若线性表L为空表，则返回TRUE，否则返回FALSE
	 GetElem(L, i, &e)
        初始条件：线性表已存在（1≥i≥ListLenght(L)）
        操作结果：用e返回线性表L中第i个数据元素的值
		...
endADT

以上的只是线性表的最基本的操作,对于实际问题可能还需更复杂的操作,旧可以使用基本操作的组合来实现


二.线性表的顺序存储结构
指的是用一段地址连续的存储单元一次存储线性表的数据元素,比如go语言中的数组,线性表长度要小于等于数组的长度

存储器中每个存储单元都有自己的编号,这个编号被称为地址,当获取到起始位置时,后面的编号都可以计算获得,而计算
的成本都是一致的,不会因为线性表的大小而改变,因此我们对线性表每个位置的存入或取出,对于计算机来说都是相等的时间,
存储性能为O(1)

2.1线性表的操作
查:
	根据索引返会对应的值即可
增:
	思路:
		插入位置不合理抛出异常
		线性表长度大于等于数组长度,扩容或者抛异常
		从最后一个元素向前遍历,到第i个位置,分别将他们全部向后移动一个位置
		将要加入的元素放入i处
		表长加1

2.2线性表的缺点:
	增删会造成大量元素位移



三.线性表的链式存储结构
为什么顺序存储时增加删除会造成大量数据位移?因为内存分布是紧挨着的,地址是顺序的,删除后留下的空白需要填充




*/

func main() {

}
