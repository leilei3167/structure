package main

/*
树是n个节点得有限集,n=0时为空树,
1.在任意一个非空得树中,有且仅有一个特定的成为根root得节点
2.当n>1时,其余节点可分为m个互不相交得有限集,每一个集合本身又是一棵树,称之为根得子树,子树之间
一定是不相交得


节点分类:
	节点拥有的子树数量成为度(degree),度为0的节点叫做叶节点,不为0的称为分支节点

	节点的子树的根称为该节点的child,该节点称为该孩子的双亲,同一个双亲的孩子节点间为兄弟,节点的祖先
	指从根节点开始到该节点所经分支上的所有节点

节点的层次从根开始定义,根为第一层,根的孩子为第二层,若某节点在第l层,其子树的根就在l+1层,双亲节点
在同一层的节点互为堂兄弟节点,节点的最大层次被称为深度或高度

如果树中节点的各子树从左至右是有序的,不能互换的,则称该树为有序树,否则是无序树

树的抽象数据类型:
操作与线性表完全不同:

ADT 树 tree
Data
	树是由一个根节点和若干子树构成,各节点之间存在层次关系
Operation
	构造树
	销毁树
	返回树的高度
	树是否为空
	返回树的根节点
	查找某个节点
	给某个节点赋值
	返回某个节点双亲
	返回某个节点最左孩子
	返回右兄弟
	插入孩子
	删除孩子




*/

func main() {

}
